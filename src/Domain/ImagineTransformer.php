<?php

namespace Liip\ImagineBundle\Domain;

/**
 * Main entry point into the imagine system.
 *
 * The transformer takes an image id, does all necessary transformations (and potentially caching) and gives the URL to the result image.
 */
interface ImagineTransformer
{
    /**
     * Determine the URL to the transformed image.
     *
     * For performance reasons, this method SHOULD cache the resulting images and skip transformation when it already exists.
     *
     * Calling the URL must result in the image being returned.
     * If possible, the image should only be generated on the fly when the URL is called.
     *
     * @param string $sourceImageId Identifier for the image, for example a file system path
     * @param string $stackName     The stack name as configured
     * @param string $targetFormat  Output format to generate
     *
     * @return string URL to where the image is available
     *
     * @throws ImageNotFoundException
     * @throws StackNotFoundException
     * @throws FormatNotSupportedException The requested image format can not be generated by the system (The transformer does not know about browser capabilities)
     * @throws TransformingException       Something went wrong while transforming the image
     */
    public function transformToUrl(string $sourceImageId, string $stackName, string $targetFormat): string;

    /**
     * Force generating the transformed image.
     *
     * If the result image is already cached, it will be regenerated and overwritten.
     *
     * There is no cache lifetime defined. The application is expected to use active invalidation if the source image changes.
     *
     * @param string $sourceImageId Identifier for the image, for example a file system path
     * @param string[] $stackNames
     * @param string[] $targetFormats
     */
    public function warmupCache(string $sourceImageId, array $stackNames, array $targetFormats): void;

    /**
     * Remove cached images for the specified source image.
     *
     * @param string $sourceImageId Identifier for the image, for example a file system path
     * @param string[] $stackNames Limit invalidation to the specified stacks. If empty, all stacks are invalidated.
     */
    public function invalidateCache(string $sourceImageId, array $stackNames = []): void;
}
